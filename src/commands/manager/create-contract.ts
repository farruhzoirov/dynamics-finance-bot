import { InlineKeyboard } from 'grammy';
import { bot } from '../../bot';
import { handleContractCreation } from '../../handlers/manager/create-contract';
import { handleContractCurreny } from '../../handlers/manager/currency';
import { getCurrency } from '../../helpers/get-currency';
import { ContractModel } from '../../models/contract.model';
import { UserStepModel } from '../../models/user-step.model';
import { isValidDateFormat } from '../../validators/date.validator';
import { handleContractRequestConfirmation } from '../../handlers/manager/confirm-contract-request';
import { handleContractRequestCancellation } from '../../handlers/manager/cancel-contract-request';
import { validateAndParseAmount } from '../../validators/amount.validator';
import { validateContractId } from '../../validators/contract-id.validator';
import { formatAmountByCurrency } from '../../helpers/format-amount';
import { getCurrencyRates } from '../../services/get-currency.service';
import { Currency } from '../../common/enums/currency.enum';

bot.callbackQuery('create_contract', handleContractCreation);
bot.callbackQuery(['contract_usd', 'contract_uzs'], handleContractCurreny);
bot.callbackQuery(
  /^confirm_contract_request:(.+)$/,
  handleContractRequestConfirmation
);

bot.callbackQuery(
  /^cancel_contract_request:(.+)$/,
  handleContractRequestCancellation
);

bot.on('message:text', async (ctx) => {
  const text = ctx?.message?.text;
  const userId = ctx?.from?.id;
  let userActions = await UserStepModel.findOne({ userId: userId });

  if (!userActions) return;

  if (userActions.step === 'ask_contract_id') {
    const contractId = validateContractId(text);
    if (!contractId) {
      await ctx.reply(
        userActions?.data.language === 'uz'
          ? "‚ùå Iltimos, qiymatni faqat musbat sonlarda va to'g'ri formatda kiriting."
          : '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.'
      );
      return;
    }

    const isExistsContract = await ContractModel.findOne({
      contractId: contractId
    });

    if (isExistsContract) {
      await ctx.reply(
        userActions?.data.language === 'uz'
          ? '‚ùå Bunday raqamli shartnoma allaqachon mavjud.'
          : '‚ùå –î–æ–≥–æ–≤–æ—Ä —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
      );
      return;
    }

    await ctx.reply(
      userActions?.data?.language === 'uz'
        ? 'Iltimos, shartnoma bo‚Äòyicha summani kiriting:'
        : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É:'
    );

    await UserStepModel.findOneAndUpdate(
      { userId },
      {
        $set: {
          step: 'ask_contract_amount',
          data: {
            ...userActions?.data,
            contractId: contractId
          }
        }
      },
      { upsert: true, new: true }
    );
  }

  if (userActions?.step === 'ask_contract_amount') {
    const amountText = ctx!.message!.text!;
    const contractAmount = validateAndParseAmount(amountText);
    if (!contractAmount || contractAmount < 0) {
      await ctx.reply(
        userActions?.data.language === 'uz'
          ? "‚ùå Iltimos, qiymatni faqat musbat sonlarda va to'g'ri formatda kiriting."
          : '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.'
      );
      return;
    }

    await UserStepModel.findOneAndUpdate(
      { userId },
      {
        $set: {
          step: 'ask_contract_currency',
          data: {
            ...userActions?.data,
            contractAmount: contractAmount
          }
        }
      },
      { upsert: true, new: true }
    );

    return await ctx.reply(
      userActions?.data.language === 'uz'
        ? 'Valyutani tanlang:'
        : '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:',
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text:
                  userActions?.data.language === 'uz'
                    ? "So'm (UZS)"
                    : '–°—É–º (UZS)',
                callback_data: 'contract_uzs'
              },
              {
                text:
                  userActions?.data.language === 'uz'
                    ? 'Dollar (USD)'
                    : '–î–æ–ª–ª–∞—Ä (USD)',
                callback_data: 'contract_usd'
              }
            ]
          ]
        }
      }
    );
  }

  if (userActions?.step === 'ask_contract_date') {
    const contractDate = ctx?.message?.text;
    const isValidDate = isValidDateFormat(contractDate);

    if (!isValidDate) {
      await ctx.reply(
        userActions.data.language === 'uz'
          ? '‚ùå Iltimos, shartnoma tuzilgan sanani DD.MM.YYYY mana shu formatda kiriting. Masalan: (01.01.2025)'
          : '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ù–∞–ø—Ä–∏–º–µ—Ä: (01.01.2025)'
      );
      return;
    }

    await ctx.reply(
      userActions?.data?.language === 'uz'
        ? "Iltimos vergul bilan ajratib Managerning to'liq F.I.SH sini va shartnoma tuzilayotgan kompaniya yoki firma nomini kiriting :"
        : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§.–ò.–û. –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ —Ñ–∏—Ä–º—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –¥–æ–≥–æ–≤–æ—Ä:'
    );

    await UserStepModel.findOneAndUpdate(
      { userId },
      {
        $set: {
          step: 'ask_manager_info',
          data: {
            ...userActions?.data,
            contractDate: contractDate
          }
        }
      },
      { upsert: true, new: true }
    );
  }

  if (userActions?.step === 'ask_manager_info') {
    const managerInfo = ctx.message.text;

    if (typeof managerInfo !== 'string') {
      await ctx.reply(
        userActions?.data?.language === 'uz'
          ? 'Tavsif noto‚Äòg‚Äòri formatda. Iltimos, matn kiriting.'
          : '–û–ø–∏—Å–∞–Ω–∏–µ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.'
      );
      return;
    }

    await ctx.reply(
      userActions?.data.language === 'uz'
        ? 'Shartnoma predmetini kiriting :'
        : '"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞":'
    );

    await UserStepModel.findOneAndUpdate(
      { userId },
      {
        $set: {
          step: 'ask_contract_description',
          data: {
            ...userActions?.data,
            info: managerInfo
          }
        }
      },
      { upsert: true, new: true }
    );
  }

  if (userActions?.step === 'ask_contract_description') {
    const description = ctx?.message?.text;

    if (typeof description !== 'string') {
      await ctx.reply(
        userActions?.data?.language === 'uz'
          ? 'Tavsif noto‚Äòg‚Äòri formatda. Iltimos, matn kiriting.'
          : '–û–ø–∏—Å–∞–Ω–∏–µ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.'
      );
      return;
    }

    userActions = await UserStepModel.findOneAndUpdate(
      { userId },
      {
        $set: {
          step: 'ask_contract_confirmation',
          data: {
            ...userActions?.data,
            description: description
          }
        }
      },
      { upsert: true, new: true }
    );
  }

  if (userActions?.step === 'ask_contract_confirmation') {
    let uniqueId: number;
    const [contractsCount, latestContract, currencyRates] = await Promise.all([
      ContractModel.countDocuments(),
      ContractModel.findOne().sort({ createdAt: -1 }),
      getCurrencyRates()
    ]);

    if (!currencyRates) return await ctx.reply('Error in getCurrencyRates');

    if (!contractsCount || !latestContract) {
      uniqueId = 1;
    } else {
      uniqueId = latestContract.uniqueId + 1;
    }

    userActions = await UserStepModel.findOneAndUpdate(
      { userId },
      {
        $set: {
          data: {
            ...userActions?.data,
            uniqueId: uniqueId
          }
        }
      },
      { upsert: true, new: true }
    );

    if (!userActions) return;

    const confirmKeyboard = new InlineKeyboard()
      .text(
        userActions.data.language === 'uz' ? '‚úÖ Tasdiqlash' : '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
        `confirm_contract_request:${userActions.data.contractId}`
      )
      .text(
        userActions.data.language === 'uz' ? '‚ùå Bekor qilish' : '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
        `cancel_contract_request:${userActions.data.contractId}`
      );

    const confirmationMessage = await ctx.reply(
      userActions.data.language === 'uz'
        ? `üìã *Quyidagi ma'lumotlarni tasdiqlang:*\n  
*üÜî Unikal ID:* ${uniqueId}
*üìÑ Shartnoma raqami:* ${userActions.data.contractId}
*üí∞ Shartnoma summasi:* ${formatAmountByCurrency(userActions.data.contractAmount, userActions.data.currency, userActions.data.language)}
*üí± Valyuta:* ${userActions.data.currency}
*üîÅ Ayirboshlash kursi:* ${formatAmountByCurrency(currencyRates.buyValue, Currency.UZS, userActions.data.language)}
*üìÖ Shartnoma sanasi:* ${userActions.data.contractDate}
*üë§ Manager haqida ma'lumot:* ${userActions.data.info}
*üìùShartnoma predmeti:* ${userActions.data.description}

Iltimos, ma'lumotlar to‚Äòg‚Äòriligini tasdiqlang.`
        : `üìã *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:*\n
*üÜî –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:* ${uniqueId}
*üìÑ –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞:* ${userActions.data.contractId}
*üí∞ –°—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞:* ${formatAmountByCurrency(userActions.data.contractAmount, userActions.data.currency, userActions.data.language)}
*üí± –í–∞–ª—é—Ç–∞:* ${userActions.data.currency}
*üîÅ –ö—É—Ä—Å –æ–±–º–µ–Ω–∞:* ${formatAmountByCurrency(currencyRates.buyValue, Currency.UZS, userActions.data.language)}
*üìÖ –î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞:* ${userActions.data.contractDate}
*üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ:* ${userActions.data.info}
*üìù –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:* ${userActions.data.description}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.`,
      {
        reply_markup: confirmKeyboard,
        parse_mode: 'Markdown'
      }
    );

    await UserStepModel.findOneAndUpdate(
      { userId },
      {
        $set: {
          data: {
            ...userActions?.data,
            managerConfirmationMessageId: confirmationMessage.message_id
          }
        }
      },
      { upsert: true }
    );
  }
});
