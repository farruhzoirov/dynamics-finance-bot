import { MyContext } from '../../bot';
import { ContractModel } from '../../models/contract.model';
import { DirectorActionModel } from '../../models/director-actions.model';
import { UserStepModel } from '../../models/user-step.model';
import { CashierActionModel } from '../../models/cashier-actions.model';
import { ContractStatuses } from '../../common/enums/contract-status.enum';
import { TransactionModel } from '../../models/transaction.model';
import { TransactionType } from '../../common/enums/transaction.enum';
import { formatAmountByCurrency } from '../../helpers/format-amount';
import { sendApprovalContractInfoToSheet } from '../../services/contracts-sheet.service';
import { IApprovalContractPayload } from '../../common/interfaces/contract';
import { UserModel } from '../../models/user.model';
import { sendTransactionsToSheet } from '../../services/transactions-sheet.service';
import { ITransaction } from '../../common/interfaces/transactions';

export async function handleContractApproval(ctx: MyContext) {
  try {
    if (!ctx.match) return;
    const contractId = ctx.match[1];
    const [
      findUser,
      findContract,
      findDirectorActions,
      findCashierActions,
      findUserActions
    ] = await Promise.all([
      UserModel.findOne({ userId: ctx.from!.id }),
      ContractModel.findOne({
        contractId: contractId
      }),
      DirectorActionModel.findOne({ contractId: contractId }),
      CashierActionModel.findOne({ contractId: contractId }),
      UserStepModel.findOne({ userId: ctx?.from?.id })
    ]);
    await ctx.answerCallbackQuery();

    if (!findContract) return await ctx.reply("Contract doesn't exist");

    const isContractApproved = await ContractModel.findOne({
      contractId: contractId,
      status: ContractStatuses.APPROVED
    });

    if (isContractApproved) {
      await ctx.editMessageReplyMarkup(undefined);
      await ctx.reply(
        findUserActions!.data.language === 'uz'
          ? '‚ÄºÔ∏èShartnoma allaqachon tasdiqlangan'
          : '‚ÄºÔ∏è–î–æ–≥–æ–≤–æ—Ä —É–∂–µ —É—Ç–≤–µ—Ä–∂–¥—ë–Ω'
      );
      return;
    }

    const findManagerActions = await UserStepModel.findOne({
      userId: findContract?.managerUserId
    });

    if (!findManagerActions) return await ctx.reply("Manager doesn't exist");
    let statusSection = '';
    let actionDate = '';

    if (findDirectorActions && findCashierActions) {
      actionDate = new Date().toLocaleString();
      findCashierActions.actionDate = actionDate;
      findCashierActions.markModified(actionDate);
      await findCashierActions.save();

      const statusEmoji = '‚úÖ';
      const statusText =
        findManagerActions.data.language === 'uz'
          ? 'Direktor tasdiqlagan'
          : '–î–∏—Ä–µ–∫—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª';

      const cashierStatusEmoji = '‚úÖ';
      const cashierStatusText =
        findManagerActions.data.language === 'uz'
          ? 'Kassir tasdiqlagan'
          : '–ö–∞—Å—Å–∏—Ä –æ–¥–æ–±—Ä–∏–ª';

      statusSection =
        findManagerActions.data.language === 'uz'
          ? `üîî *Director harakati:*\n${statusEmoji} *Status:* ${statusText}\nüìÖ *Vaqt:* ${findDirectorActions?.actionDate || "Noma'lum"}\nüë§ *Director:* ${findDirectorActions?.directorName || 'Director'}\n\nüîî *Kassir harakati:*\n${cashierStatusEmoji} *Status:* ${cashierStatusText}\nüìÖ *Vaqt:* ${actionDate}\n üë§ *Kassir:* ${findCashierActions?.cashierName || 'Cashier'} `
          : `üîî *–î–µ–π—Å—Ç–≤–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:*\n${statusEmoji} *–°—Ç–∞—Ç—É—Å:* ${statusText}\nüìÖ *–í—Ä–µ–º—è:* ${findDirectorActions?.actionDate || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\nüë§ *–î–∏—Ä–µ–∫—Ç–æ—Ä:* ${findDirectorActions?.directorName || 'Director'}\n\nüîî *–î–µ–π—Å—Ç–≤–∏–µ –∫–∞—Å—Å–∏—Ä–∞:*\n${cashierStatusEmoji} *–°—Ç–∞—Ç—É—Å:* ${cashierStatusText}\nüìÖ *–í—Ä–µ–º—è:* ${actionDate}\n üë§ *–ö–∞—Å—Å–∏—Ä:* ${findCashierActions?.cashierName || 'Cashier'}`;
    }

    const updatedText =
      findManagerActions.data.language === 'uz'
        ? `üìã *Quyidagi ma'lumotlarni tasdiqlang:*\n` +
          `üÜî *Unikal ID:* ${findContract.uniqueId}\n` +
          `üìÑ *Shartnoma raqami:* ${findContract.contractId}\n` +
          `üí∞ *Shartnoma summasi:* ${formatAmountByCurrency(findContract.contractAmount, findContract.currency, findManagerActions.data.language)}\n` +
          `üí± *Valyuta:* ${findContract.currency}\n` +
          `üîÅ *Ayirboshlash kursi:* ${findContract.exchangeRate}\n` +
          `üìÖ *Shartnoma sanasi:* ${findContract.contractDate}\n` +
          `üë§ *Manager haqida ma'lumot:* ${findContract.info}\n` +
          `üìù *Shartnoma predmeti:* ${findContract.description}\n\n` +
          `${statusSection}`
        : `üìã *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:*\n` +
          `üÜî *–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:* ${findContract.uniqueId}\n` +
          `üìÑ *–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞:* ${findContract.contractId}\n` +
          `üí∞ *–°—É–º–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞:* ${formatAmountByCurrency(findContract.contractAmount, findContract.currency, findManagerActions.data.language)}\n` +
          `üí± *–í–∞–ª—é—Ç–∞:* ${findContract.currency}\n` +
          `üîÅ *–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:* ${findContract.exchangeRate}\n` +
          `üìÖ *–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞:* ${findContract.contractDate}\n` +
          `üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ:* ${findContract.info}\n` +
          `üìù *–ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:* ${findContract.description}\n\n` +
          `${statusSection}`;

    await ctx.api.editMessageText(
      findContract!.managerUserId!.toString(),
      findContract!.managerConfirmationMessageId!,
      updatedText,
      {
        parse_mode: 'Markdown'
      }
    );

    await ctx.reply(
      findUserActions?.data.language === 'uz'
        ? "‚úÖ O'zgarish managerga yuborildi."
        : '‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.'
    );

    const confirmationText =
      findManagerActions.data.language === 'uz'
        ? '‚úÖ Status yangilandi.'
        : '‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω.';

    await ctx.api.sendMessage(
      findContract!.managerUserId!.toString(),
      confirmationText,
      {
        reply_to_message_id: findContract.managerConfirmationMessageId
      }
    );
    await ContractModel.findOneAndUpdate(
      { contractId: findContract.contractId },
      {
        $set: {
          status: ContractStatuses.APPROVED
        }
      }
    );
    await UserStepModel.findOneAndUpdate(
      { userId: findManagerActions.userId },
      {
        $set: {
          step: 'main_menu'
        }
      }
    );
    const transaction = await TransactionModel.create({
      type: TransactionType.INCOME,
      amount: findContract.contractAmount,
      contractId: findContract.contractId,
      currency: findContract.currency,
      exchangeRate: findContract.exchangeRate,
      description: findContract.description,
      createdBy:
        `${findUser?.userFirstName || ''} ${findUser?.userLastName || ''}`.trim()
    });
    const sheetBody: IApprovalContractPayload = {
      uniqueId: findContract.uniqueId,
      contractId: findContract.contractId,
      contractAmount: findContract.contractAmount,
      currency: findContract.currency,
      exchangeRate: findContract.exchangeRate,
      contractDate: findContract.contractDate,
      info: findContract.info,
      description: findContract.description,
      directorAction: '‚úÖ',
      cashierAction: '‚úÖ'
    };
    await Promise.all([
      sendApprovalContractInfoToSheet(ctx, sheetBody),
      sendTransactionsToSheet(ctx, transaction.toObject() as ITransaction)
    ]);
    await ctx.editMessageReplyMarkup(undefined);
  } catch (err) {
    console.error('Error in ApproveContract: Cashir', err);
    await ctx.reply('Error in ApproveContract: Cashier');
  }
}
